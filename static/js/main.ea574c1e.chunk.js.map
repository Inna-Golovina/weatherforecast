{"version":3,"sources":["components/Modal/Modal.jsx","types.js","components/Table/Table.jsx","App.jsx","index.js"],"names":["Modal","PropTypes","bool","isRequired","shape","id","number","date","string","temperatureC","temperatureF","summary","func","open","weatherforecast","handleSave","handleClose","useState","setDate","setTemperatureC","setTemperatureF","setSummary","dateError","setDateError","useEffect","modalInvalid","className","type","onClick","htmlFor","value","name","onChange","e","target","onBlur","validator","isDate","maxLength","length","disabled","Table","weatherFromServer","weatherforecasts","setWeatherforecasts","active","modal","setModal","map","key","slice","split","reverse","join","openModal","deleted","filter","removeData","prevWeatherforecasts","forecast","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ea574c1e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport validator from 'validator';\nimport { ModalType } from '../../types';\nimport './Modal.css';\n\nexport const Modal = ({\n  open, weatherforecast, handleSave, handleClose,\n}) => {\n  const [date, setDate] = useState('');\n  const [temperatureC, setTemperatureC] = useState(0);\n  const [temperatureF, setTemperatureF] = useState(0);\n  const [summary, setSummary] = useState('');\n  const [dateError, setDateError] = useState(false);\n\n  useEffect(() => {\n    setDate(weatherforecast ? weatherforecast.date : '');\n    setTemperatureC(weatherforecast ? weatherforecast.temperatureC : 0);\n    setTemperatureF(weatherforecast ? weatherforecast.temperatureF : 0);\n    setSummary(weatherforecast ? weatherforecast.summary : '');\n  }, [open, weatherforecast]);\n\n  if (!open || !weatherforecast) {\n    return null;\n  }\n\n  const validateField = (e) => {\n    const { value } = e.target;\n\n    if (validator.isDate(value)) {\n      setDateError(false);\n    } else {\n      setDateError(true);\n    }\n  };\n\n  const save = () => {\n    handleSave({\n      ...weatherforecast, date, temperatureC, temperatureF, summary,\n    });\n    handleClose();\n  };\n\n  const modalInvalid = !date\n    || dateError\n    || !temperatureC\n    || !temperatureF\n    || !summary;\n\n  return (\n    <div className=\"modal-wrapper\">\n      <div className=\"modal\">\n        <button\n          type=\"button\"\n          className=\"close\"\n          onClick={handleClose}\n        >\n          Ã—\n        </button>\n\n        <label htmlFor=\"date\">Date</label>\n        <input\n          type=\"date\"\n          value={date}\n          name=\"date\"\n          onChange={e => setDate(e.target.value)}\n          onBlur={validateField}\n        />\n        {dateError && (\n        <p className=\"is-danger\">\n          The date is not valid\n        </p>\n        )}\n\n        <label htmlFor=\"temperatureC\">TemperatureC</label>\n        <input\n          type=\"number\"\n          value={temperatureC}\n          name=\"temperatureC\"\n          onChange={e => setTemperatureC(e.target.value)}\n        />\n        { !temperatureC && (\n        <p className=\"is-danger\">\n          The temperature must have at least one number\n        </p>\n        )}\n\n        <label htmlFor=\"temperatureF\">TemperatureF</label>\n        <input\n          type=\"number\"\n          value={temperatureF}\n          name=\"temperatureF\"\n          onChange={e => setTemperatureF(e.target.value)}\n        />\n        { !temperatureF && (\n        <p className=\"is-danger\">\n          The temperature must have at least one number\n        </p>\n        )}\n\n        <label htmlFor=\"summary\">Summary</label>\n        <input\n          type=\"text\"\n          value={summary}\n          name=\"summary\"\n          maxLength=\"127\"\n          onChange={e => (setSummary(e.target.value))}\n        />\n        { summary.length > 126 && (\n        <p className=\"is-danger\">\n          The summary must be no more than 127 characters\n        </p>\n        )}\n\n        <div>\n          <button\n            type=\"button\"\n            className=\"save\"\n            onClick={save}\n            disabled={modalInvalid}\n          >\n            Save\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nModal.propTypes = ModalType;\n","import PropTypes from 'prop-types';\n\nexport const ModalType = {\n  open: PropTypes.bool.isRequired,\n  weatherforecast: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    date: PropTypes.string.isRequired,\n    temperatureC: PropTypes.number.isRequired,\n    temperatureF: PropTypes.number.isRequired,\n    summary: PropTypes.string.isRequired,\n  }),\n  handleSave: PropTypes.func.isRequired,\n  handleClose: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport { Modal } from '../Modal/Modal';\nimport './Table.css';\nimport weatherFromServer from '../../api/api.json';\n\nexport const Table = () => {\n  const [weatherforecasts, setWeatherforecasts] = useState(weatherFromServer);\n  const [modal, setModal] = useState({\n    active: false,\n    weatherforecast: null,\n  });\n\n  const openModal = (weatherforecast) => {\n    setModal({\n      active: true, weatherforecast,\n    });\n  };\n\n  const closeModal = () => {\n    setModal({\n      active: false, weatherforecast: null,\n    });\n  };\n\n  const saveWeatherforecast = (weatherforecast) => {\n    setWeatherforecasts(\n      prevWeatherforecasts => prevWeatherforecasts.map((forecast) => {\n        if (forecast.id !== weatherforecast.id) {\n          return forecast;\n        }\n\n        return {\n          ...forecast,\n          date: weatherforecast.date,\n          temperatureC: weatherforecast.temperatureC,\n          temperatureF: weatherforecast.temperatureF,\n          summary: weatherforecast.summary,\n        };\n      }),\n    );\n  };\n\n  const removeData = (id) => {\n    const deleted = weatherforecasts.filter(\n      weatherforecast => id !== weatherforecast.id,\n    );\n\n    setWeatherforecasts(deleted);\n  };\n\n  return (\n    <>\n      <div className=\"btn-wrap\">\n        <button\n          type=\"button\"\n          className=\"info\"\n        >\n          Detailed information\n        </button>\n        <button\n          type=\"button\"\n          className=\"question\"\n        >\n          Question\n        </button>\n      </div>\n\n      {weatherforecasts.length > 0 && (\n      <table className=\"table\">\n        <caption>Weatherforecast</caption>\n        <thead>\n          <tr>\n            <th>Date</th>\n            <th>Temperature (C)</th>\n            <th>Temperature (F)</th>\n            <th>Summary</th>\n            <th>Operation</th>\n          </tr>\n        </thead>\n        <tbody>\n          {weatherforecasts.map(weatherforecast => (\n            <tr key={weatherforecast.id}>\n\n              <td>\n                {weatherforecast.date\n                  .slice(0, 10).split('-').reverse().join('.')}\n              </td>\n              <td>{weatherforecast.temperatureC}</td>\n              <td>{weatherforecast.temperatureF}</td>\n              <td>{weatherforecast.summary}</td>\n              <td>\n                <button\n                  type=\"button\"\n                  className=\"button-edit\"\n                  onClick={() => openModal(weatherforecast)}\n                >\n                  <i className=\"far fa-edit\" />\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"button-remove\"\n                  onClick={() => removeData(weatherforecast.id)}\n                >\n                  <i className=\"fas fa-trash\" />\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      )}\n      <Modal\n        open={modal.active}\n        handleClose={closeModal}\n        handleSave={saveWeatherforecast}\n        weatherforecast={modal.weatherforecast}\n      />\n    </>\n  );\n};\n","import React from 'react';\nimport './App.css';\nimport { Table } from './components/Table';\n\nconst App = () => (\n  <div className=\"wrapper\">\n    <Table />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}